set confirm
set scrolloff=5
" Remember cursor position
augroup vimrc-remember-cursor-position
    autocmd!
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

au BufNewFile *.sh 0r ~/.vim/skel/skel.sh

highlight ExtraWhitespace ctermbg=88 guibg=red
highlight AllTabs ctermbg=22 guibg=green
highlight LineNr ctermfg=darkgrey ctermbg=236

" highlight trailing whitespace and literal tabs
"match ExtraWhitespace /\s\+$/
"match AllTabs /\t/
match errorMsg /\s\+$/
"match errorMsg /\t/

function! RemoveTrailingWhitespace()
  let save_cursor = getcurpos() " save current cursor position
  if search('\v\s+$',"n") " check for offenders, to prevent error from %s
    execute '%s/\v\s+$//g'
  endif
  call setpos('.', save_cursor) " put the cursor back where it started
endfunction

function! ProtectBashVars()
  let regex='\v(([^\\]|^)[$])([A-Za-z0-9_]+)'
  if search(regex,"n") " check for offenders, to prevent error from %s
    let save_cursor = getcurpos() " save current cursor position
    let subst='%s/' . regex . '/\1{\3}/gc'
    execute subst
    call setpos('.', save_cursor) " put the cursor back where it started
  endif
endfunction

let @w=":call RemoveTrailingWhitespace()\<CR>"
autocmd FileType sh let @p=":call ProtectBashVars()\<CR>"

noremap <silent> <Tab> gt

noremap <silent> <C-Q> :wq<CR>
vnoremap <silent> <C-Q> <C-C>:wq<CR>
inoremap <silent> <C-Q> <C-O>:wq<CR>

noremap <silent> <C-X> :q<CR>
vnoremap <silent> <C-X> <C-C>:q<CR>
inoremap <silent> <C-X> <C-O>:q<CR>

noremap <silent> <C-P> :set paste<CR>
vnoremap <silent> <C-P> <C-C>:set paste<CR>
inoremap <silent> <C-P> <C-O>:set paste<CR>

noremap <silent> <C-S> :update<CR>
noremap <silent> s :update<CR>
vnoremap <silent> <C-S> <C-C>:update<CR>
inoremap <silent> <C-S> <C-O>:update<CR>

nnoremap <silent> <Space> :silent :nohl<CR>

noremap  <buffer> <silent> <Up>   gk
noremap  <buffer> <silent> <Down> gj
noremap  <buffer> <silent> <Home> g<Home>
noremap  <buffer> <silent> <End>  g<End>
inoremap <buffer> <silent> <Up>   <C-o>gk
inoremap <buffer> <silent> <Down> <C-o>gj
inoremap <buffer> <silent> <Home> <C-o>g<Home>
inoremap <buffer> <silent> <End>  <C-o>g<End>

filetype plugin indent on
set wrap lbr
" On pressing tab, insert 2 spaces
set expandtab
" show existing tab with 2 spaces width
set tabstop=2
set softtabstop=2
" when indenting with '>', use 2 spaces width
set shiftwidth=2
set foldmethod=indent
hi Folded ctermbg=237
